---
title: "Client Report - Finding relationships in baseball"
subtitle: "Course DS 250"
author: "Carter Baumgart"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import numpy as np
import plotly.express as px
import sqlite3
```


## Elevator pitch

_Baseball is filled with an incredible amount of statistics - some of which can be misleading if not interpretted correcly. However with proper guidance there are serious insights to be gleaned from this data._
_Batting averages are very important to deciding who may be a good fit for a team. But what is more important is making sure that the averages you calculate are accurate. From the insights gathered below we can see that the bigger the sample size or rather the more games played - the more we are able to see a player's true worth in regards to their batting average._

```{python}
sqldb = sqlite3.connect('lahmansbaseballdb.sqlite')
```

__Write an SQL query to create a new dataframe about baseball players who attended BYU-Idaho. The new table should contain five columns: playerID, schoolID, salary, and the yearID/teamID associated with each salary. Order the table by salary (highest to lowest) and print out the table in your report.__

_lindsma01 from byui was by far the most successful athlete from byui with several of the top salaries._

```{python}

sql_query = """
SELECT 
    p.playerID,
    e.schoolID,
    s.salary,
    s.yearID,
    s.teamID
FROM 
    people AS p
JOIN 
    collegeplaying AS e ON p.playerID = e.playerID
JOIN 
    salaries AS s ON p.playerID = s.playerID
WHERE 
    e.schoolID = 'idbyuid'
ORDER BY 
    s.salary DESC;
"""
df = pd.read_sql_query(sql_query, sqldb)

print(df)
```

_this table includes all byui alumni who played for professional teams and is organized by salary._

__Write an SQL query that provides playerID, yearID, and batting average for players with at least 1 at bat that year. Sort the table from highest batting average to lowest, and then by playerid alphabetically. Show the top 5 results in your report.__

_All these players have a 1.0 batting average suggesting that they probably have not played much since it is nigh unto impossible to maintain such an average. This could result in skewed stats since we don't really know how reliable these players actually are._

```{python}
sql_query = """
SELECT
    playerID,
    yearID,
    CAST(SUM(H) AS REAL) / NULLIF(SUM(AB), 0) AS batting_average
FROM
    Batting
GROUP BY
    playerID,
    yearID
HAVING
    SUM(AB) > 0
ORDER BY
    batting_average DESC,
    playerID ASC
LIMIT 5;
"""
df = pd.read_sql_query(sql_query, sqldb)

print(df)
```

_All players listed here have a 1.0 batting average and are from a range of years._

__Use the same query as above, but only include players with at least 10 at bats that year. Print the top 5 results.__

_This result suggests a correction to the query run above in that it increases the data that goes into this batting average calculation. Now that more games have been included you get a better picture of who has the best batting average over time._

```{python}
sql_query = """
SELECT
    playerID,
    yearID,
    CAST(SUM(H) AS REAL) / NULLIF(SUM(AB), 0) AS batting_average
FROM
    Batting
GROUP BY
    playerID,
    yearID
HAVING
    SUM(AB) >= 10
ORDER BY
    batting_average DESC,
    playerID ASC
LIMIT 5;
"""
df = pd.read_sql_query(sql_query, sqldb)
print(df)
```

_The players listed here are the top 5 batting averages for having played at least 10 games._

__Now calculate the batting average for players over their entire careers (all years combined). Only include players with at least 100 at bats, and print the top 5 results__

_This result suggests the strongest correction to the query run above in that it once again increases the data that goes into this batting average calculation. The largest sample size of games have been included now showing which veterans have the best batting average over time and could be the most valuable._

```{python}
sql_query = """
SELECT
    playerID,
    CAST(SUM(H) AS REAL) / NULLIF(SUM(AB), 0) AS career_batting_average
FROM
    Batting
GROUP BY
    playerID
HAVING
    SUM(AB) >= 100
ORDER BY
    career_batting_average DESC
LIMIT 5;
"""

df = pd.read_sql_query(sql_query, sqldb)

print(df)
```

_The players listed here are the top 5 batting averages for having played at least 100 games._

__Pick any two baseball teams and compare them using a metric of your choice (average salary, home runs, number of wins, etc). Write an SQL query to get the data you need, then make a graph using Plotly Express to visualize the comparison. What do you learn?__

_It would appear that as a player, the Yankees would be a more enticing team to chase after since you are more likely to be paid more. With more reseach it might also be interesting to find out if paying more money means that the team performs better._

```{python}
sql_query = """
SELECT
    teamID,
    AVG(salary) AS avg_salary
FROM
    Salaries
WHERE
    teamID IN ('NYA', 'BOS')
GROUP BY
    teamID;
"""
df = pd.read_sql_query(sql_query, sqldb)

fig = px.bar(df, x='teamID', y='avg_salary', title='Average Salary Comparison Between NY Yankees and Boston Red Sox')
fig.update_layout(xaxis_title='Team', yaxis_title='Average Salary')
fig.show()
```

_The Boston Red Sox are paying out an average of 3 million per player while the NY Yankees are paying out nearly 4 million per player._
